//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MinerWars.AppCode.Networking.MasterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyRegistrationFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
    [System.SerializableAttribute()]
    public partial class MyRegistrationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MinerWars.CommonLIB.AppCode.Networking.MyMwcRegisterResponseResultEnum ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MinerWars.CommonLIB.AppCode.Networking.MyMwcRegisterResponseResultEnum ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MySteamFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
    [System.SerializableAttribute()]
    public partial class MySteamFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MinerWars.AppCode.Networking.MasterService.SteamFaultCode SteamFaultCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MinerWars.AppCode.Networking.MasterService.SteamFaultCode SteamFaultCode {
            get {
                return this.SteamFaultCodeField;
            }
            set {
                if ((this.SteamFaultCodeField.Equals(value) != true)) {
                    this.SteamFaultCodeField = value;
                    this.RaisePropertyChanged("SteamFaultCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SteamFaultCode", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
    public enum SteamFaultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTicket = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsernameAndPassword = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotRegistered = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialKeyIsNotAssignedToAccount = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyRegistered = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialKeyNotFound = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialKeyProductIsInvalid = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialKeyAlreadyUsed = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialKeyDeleted = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoMW1ProductsOwned = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppCode.Networking.MasterService.IMyMasterService")]
    public interface IMyMasterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/CheckVersion", ReplyAction="http://tempuri.org/IMyMasterService/CheckVersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MinerWars.CommonLIB.AppCode.Networking.Services.MyVersionFault), Action="http://tempuri.org/IMyMasterService/CheckVersionMyVersionFaultFault", Name="MyVersionFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.CommonLIB.AppCode.Networking.Se" +
            "rvices")]
        void CheckVersion(int appVersion);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/CheckVersion", ReplyAction="http://tempuri.org/IMyMasterService/CheckVersionResponse")]
        System.IAsyncResult BeginCheckVersion(int appVersion, System.AsyncCallback callback, object asyncState);
        
        void EndCheckVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/GetSectorServer", ReplyAction="http://tempuri.org/IMyMasterService/GetSectorServerResponse")]
        string GetSectorServer();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/GetSectorServer", ReplyAction="http://tempuri.org/IMyMasterService/GetSectorServerResponse")]
        System.IAsyncResult BeginGetSectorServer(System.AsyncCallback callback, object asyncState);
        
        string EndGetSectorServer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/GetAllServers", ReplyAction="http://tempuri.org/IMyMasterService/GetAllServersResponse")]
        string[] GetAllServers();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/GetAllServers", ReplyAction="http://tempuri.org/IMyMasterService/GetAllServersResponse")]
        System.IAsyncResult BeginGetAllServers(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetAllServers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/Register", ReplyAction="http://tempuri.org/IMyMasterService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MinerWars.AppCode.Networking.MasterService.MyRegistrationFault), Action="http://tempuri.org/IMyMasterService/RegisterMyRegistrationFaultFault", Name="MyRegistrationFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
        void Register(string username, string passwordHash, string email, bool sendNewsletter);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/Register", ReplyAction="http://tempuri.org/IMyMasterService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string username, string passwordHash, string email, bool sendNewsletter, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/SteamDemoLogin", ReplyAction="http://tempuri.org/IMyMasterService/SteamDemoLoginResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="username")]
        string SteamDemoLogin(out string token, long steamUserId, byte[] ticket);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/SteamDemoLogin", ReplyAction="http://tempuri.org/IMyMasterService/SteamDemoLoginResponse")]
        System.IAsyncResult BeginSteamDemoLogin(long steamUserId, byte[] ticket, System.AsyncCallback callback, object asyncState);
        
        [return: System.ServiceModel.MessageParameterAttribute(Name="username")]
        string EndSteamDemoLogin(out string token, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/SteamLogin", ReplyAction="http://tempuri.org/IMyMasterService/SteamLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MinerWars.AppCode.Networking.MasterService.MySteamFault), Action="http://tempuri.org/IMyMasterService/SteamLoginMySteamFaultFault", Name="MySteamFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="username")]
        string SteamLogin(out string token, long steamUserId, byte[] ticket);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/SteamLogin", ReplyAction="http://tempuri.org/IMyMasterService/SteamLoginResponse")]
        System.IAsyncResult BeginSteamLogin(long steamUserId, byte[] ticket, System.AsyncCallback callback, object asyncState);
        
        [return: System.ServiceModel.MessageParameterAttribute(Name="username")]
        string EndSteamLogin(out string token, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMasterService/SteamRegister", ReplyAction="http://tempuri.org/IMyMasterService/SteamRegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MinerWars.AppCode.Networking.MasterService.MySteamFault), Action="http://tempuri.org/IMyMasterService/SteamRegisterMySteamFaultFault", Name="MySteamFault", Namespace="http://schemas.datacontract.org/2004/07/MinerWars.MasterServerLIB.MasterService")]
        void SteamRegister(long steamUserId, byte[] ticket, string serialKey, string steamUserName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyMasterService/SteamRegister", ReplyAction="http://tempuri.org/IMyMasterService/SteamRegisterResponse")]
        System.IAsyncResult BeginSteamRegister(long steamUserId, byte[] ticket, string serialKey, string steamUserName, System.AsyncCallback callback, object asyncState);
        
        void EndSteamRegister(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyMasterServiceChannel : MinerWars.AppCode.Networking.MasterService.IMyMasterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSectorServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSectorServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SteamDemoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SteamDemoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string token {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SteamLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SteamLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string token {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyMasterServiceClient : System.ServiceModel.ClientBase<MinerWars.AppCode.Networking.MasterService.IMyMasterService>, MinerWars.AppCode.Networking.MasterService.IMyMasterService {
        
        private BeginOperationDelegate onBeginCheckVersionDelegate;
        
        private EndOperationDelegate onEndCheckVersionDelegate;
        
        private System.Threading.SendOrPostCallback onCheckVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSectorServerDelegate;
        
        private EndOperationDelegate onEndGetSectorServerDelegate;
        
        private System.Threading.SendOrPostCallback onGetSectorServerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllServersDelegate;
        
        private EndOperationDelegate onEndGetAllServersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllServersCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginSteamDemoLoginDelegate;
        
        private EndOperationDelegate onEndSteamDemoLoginDelegate;
        
        private System.Threading.SendOrPostCallback onSteamDemoLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginSteamLoginDelegate;
        
        private EndOperationDelegate onEndSteamLoginDelegate;
        
        private System.Threading.SendOrPostCallback onSteamLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginSteamRegisterDelegate;
        
        private EndOperationDelegate onEndSteamRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onSteamRegisterCompletedDelegate;
        
        public MyMasterServiceClient() {
        }
        
        public MyMasterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyMasterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyMasterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyMasterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckVersionCompleted;
        
        public event System.EventHandler<GetSectorServerCompletedEventArgs> GetSectorServerCompleted;
        
        public event System.EventHandler<GetAllServersCompletedEventArgs> GetAllServersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<SteamDemoLoginCompletedEventArgs> SteamDemoLoginCompleted;
        
        public event System.EventHandler<SteamLoginCompletedEventArgs> SteamLoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SteamRegisterCompleted;
        
        public void CheckVersion(int appVersion) {
            base.Channel.CheckVersion(appVersion);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckVersion(int appVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckVersion(appVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckVersion(System.IAsyncResult result) {
            base.Channel.EndCheckVersion(result);
        }
        
        private System.IAsyncResult OnBeginCheckVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int appVersion = ((int)(inValues[0]));
            return this.BeginCheckVersion(appVersion, callback, asyncState);
        }
        
        private object[] OnEndCheckVersion(System.IAsyncResult result) {
            this.EndCheckVersion(result);
            return null;
        }
        
        private void OnCheckVersionCompleted(object state) {
            if ((this.CheckVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckVersionAsync(int appVersion) {
            this.CheckVersionAsync(appVersion, null);
        }
        
        public void CheckVersionAsync(int appVersion, object userState) {
            if ((this.onBeginCheckVersionDelegate == null)) {
                this.onBeginCheckVersionDelegate = new BeginOperationDelegate(this.OnBeginCheckVersion);
            }
            if ((this.onEndCheckVersionDelegate == null)) {
                this.onEndCheckVersionDelegate = new EndOperationDelegate(this.OnEndCheckVersion);
            }
            if ((this.onCheckVersionCompletedDelegate == null)) {
                this.onCheckVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckVersionCompleted);
            }
            base.InvokeAsync(this.onBeginCheckVersionDelegate, new object[] {
                        appVersion}, this.onEndCheckVersionDelegate, this.onCheckVersionCompletedDelegate, userState);
        }
        
        public string GetSectorServer() {
            return base.Channel.GetSectorServer();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSectorServer(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSectorServer(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSectorServer(System.IAsyncResult result) {
            return base.Channel.EndGetSectorServer(result);
        }
        
        private System.IAsyncResult OnBeginGetSectorServer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSectorServer(callback, asyncState);
        }
        
        private object[] OnEndGetSectorServer(System.IAsyncResult result) {
            string retVal = this.EndGetSectorServer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSectorServerCompleted(object state) {
            if ((this.GetSectorServerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSectorServerCompleted(this, new GetSectorServerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSectorServerAsync() {
            this.GetSectorServerAsync(null);
        }
        
        public void GetSectorServerAsync(object userState) {
            if ((this.onBeginGetSectorServerDelegate == null)) {
                this.onBeginGetSectorServerDelegate = new BeginOperationDelegate(this.OnBeginGetSectorServer);
            }
            if ((this.onEndGetSectorServerDelegate == null)) {
                this.onEndGetSectorServerDelegate = new EndOperationDelegate(this.OnEndGetSectorServer);
            }
            if ((this.onGetSectorServerCompletedDelegate == null)) {
                this.onGetSectorServerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSectorServerCompleted);
            }
            base.InvokeAsync(this.onBeginGetSectorServerDelegate, null, this.onEndGetSectorServerDelegate, this.onGetSectorServerCompletedDelegate, userState);
        }
        
        public string[] GetAllServers() {
            return base.Channel.GetAllServers();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllServers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllServers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetAllServers(System.IAsyncResult result) {
            return base.Channel.EndGetAllServers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllServers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllServers(callback, asyncState);
        }
        
        private object[] OnEndGetAllServers(System.IAsyncResult result) {
            string[] retVal = this.EndGetAllServers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllServersCompleted(object state) {
            if ((this.GetAllServersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllServersCompleted(this, new GetAllServersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllServersAsync() {
            this.GetAllServersAsync(null);
        }
        
        public void GetAllServersAsync(object userState) {
            if ((this.onBeginGetAllServersDelegate == null)) {
                this.onBeginGetAllServersDelegate = new BeginOperationDelegate(this.OnBeginGetAllServers);
            }
            if ((this.onEndGetAllServersDelegate == null)) {
                this.onEndGetAllServersDelegate = new EndOperationDelegate(this.OnEndGetAllServers);
            }
            if ((this.onGetAllServersCompletedDelegate == null)) {
                this.onGetAllServersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllServersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllServersDelegate, null, this.onEndGetAllServersDelegate, this.onGetAllServersCompletedDelegate, userState);
        }
        
        public void Register(string username, string passwordHash, string email, bool sendNewsletter) {
            base.Channel.Register(username, passwordHash, email, sendNewsletter);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegister(string username, string passwordHash, string email, bool sendNewsletter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(username, passwordHash, email, sendNewsletter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string passwordHash = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            bool sendNewsletter = ((bool)(inValues[3]));
            return this.BeginRegister(username, passwordHash, email, sendNewsletter, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            this.EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string username, string passwordHash, string email, bool sendNewsletter) {
            this.RegisterAsync(username, passwordHash, email, sendNewsletter, null);
        }
        
        public void RegisterAsync(string username, string passwordHash, string email, bool sendNewsletter, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        username,
                        passwordHash,
                        email,
                        sendNewsletter}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        public string SteamDemoLogin(out string token, long steamUserId, byte[] ticket) {
            return base.Channel.SteamDemoLogin(out token, steamUserId, ticket);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSteamDemoLogin(long steamUserId, byte[] ticket, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSteamDemoLogin(steamUserId, ticket, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSteamDemoLogin(out string token, System.IAsyncResult result) {
            return base.Channel.EndSteamDemoLogin(out token, result);
        }
        
        private System.IAsyncResult OnBeginSteamDemoLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long steamUserId = ((long)(inValues[0]));
            byte[] ticket = ((byte[])(inValues[1]));
            return this.BeginSteamDemoLogin(steamUserId, ticket, callback, asyncState);
        }
        
        private object[] OnEndSteamDemoLogin(System.IAsyncResult result) {
            string token = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndSteamDemoLogin(out token, result);
            return new object[] {
                    token,
                    retVal};
        }
        
        private void OnSteamDemoLoginCompleted(object state) {
            if ((this.SteamDemoLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SteamDemoLoginCompleted(this, new SteamDemoLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SteamDemoLoginAsync(long steamUserId, byte[] ticket) {
            this.SteamDemoLoginAsync(steamUserId, ticket, null);
        }
        
        public void SteamDemoLoginAsync(long steamUserId, byte[] ticket, object userState) {
            if ((this.onBeginSteamDemoLoginDelegate == null)) {
                this.onBeginSteamDemoLoginDelegate = new BeginOperationDelegate(this.OnBeginSteamDemoLogin);
            }
            if ((this.onEndSteamDemoLoginDelegate == null)) {
                this.onEndSteamDemoLoginDelegate = new EndOperationDelegate(this.OnEndSteamDemoLogin);
            }
            if ((this.onSteamDemoLoginCompletedDelegate == null)) {
                this.onSteamDemoLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSteamDemoLoginCompleted);
            }
            base.InvokeAsync(this.onBeginSteamDemoLoginDelegate, new object[] {
                        steamUserId,
                        ticket}, this.onEndSteamDemoLoginDelegate, this.onSteamDemoLoginCompletedDelegate, userState);
        }
        
        public string SteamLogin(out string token, long steamUserId, byte[] ticket) {
            return base.Channel.SteamLogin(out token, steamUserId, ticket);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSteamLogin(long steamUserId, byte[] ticket, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSteamLogin(steamUserId, ticket, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSteamLogin(out string token, System.IAsyncResult result) {
            return base.Channel.EndSteamLogin(out token, result);
        }
        
        private System.IAsyncResult OnBeginSteamLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long steamUserId = ((long)(inValues[0]));
            byte[] ticket = ((byte[])(inValues[1]));
            return this.BeginSteamLogin(steamUserId, ticket, callback, asyncState);
        }
        
        private object[] OnEndSteamLogin(System.IAsyncResult result) {
            string token = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndSteamLogin(out token, result);
            return new object[] {
                    token,
                    retVal};
        }
        
        private void OnSteamLoginCompleted(object state) {
            if ((this.SteamLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SteamLoginCompleted(this, new SteamLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SteamLoginAsync(long steamUserId, byte[] ticket) {
            this.SteamLoginAsync(steamUserId, ticket, null);
        }
        
        public void SteamLoginAsync(long steamUserId, byte[] ticket, object userState) {
            if ((this.onBeginSteamLoginDelegate == null)) {
                this.onBeginSteamLoginDelegate = new BeginOperationDelegate(this.OnBeginSteamLogin);
            }
            if ((this.onEndSteamLoginDelegate == null)) {
                this.onEndSteamLoginDelegate = new EndOperationDelegate(this.OnEndSteamLogin);
            }
            if ((this.onSteamLoginCompletedDelegate == null)) {
                this.onSteamLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSteamLoginCompleted);
            }
            base.InvokeAsync(this.onBeginSteamLoginDelegate, new object[] {
                        steamUserId,
                        ticket}, this.onEndSteamLoginDelegate, this.onSteamLoginCompletedDelegate, userState);
        }
        
        public void SteamRegister(long steamUserId, byte[] ticket, string serialKey, string steamUserName) {
            base.Channel.SteamRegister(steamUserId, ticket, serialKey, steamUserName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSteamRegister(long steamUserId, byte[] ticket, string serialKey, string steamUserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSteamRegister(steamUserId, ticket, serialKey, steamUserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSteamRegister(System.IAsyncResult result) {
            base.Channel.EndSteamRegister(result);
        }
        
        private System.IAsyncResult OnBeginSteamRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long steamUserId = ((long)(inValues[0]));
            byte[] ticket = ((byte[])(inValues[1]));
            string serialKey = ((string)(inValues[2]));
            string steamUserName = ((string)(inValues[3]));
            return this.BeginSteamRegister(steamUserId, ticket, serialKey, steamUserName, callback, asyncState);
        }
        
        private object[] OnEndSteamRegister(System.IAsyncResult result) {
            this.EndSteamRegister(result);
            return null;
        }
        
        private void OnSteamRegisterCompleted(object state) {
            if ((this.SteamRegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SteamRegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SteamRegisterAsync(long steamUserId, byte[] ticket, string serialKey, string steamUserName) {
            this.SteamRegisterAsync(steamUserId, ticket, serialKey, steamUserName, null);
        }
        
        public void SteamRegisterAsync(long steamUserId, byte[] ticket, string serialKey, string steamUserName, object userState) {
            if ((this.onBeginSteamRegisterDelegate == null)) {
                this.onBeginSteamRegisterDelegate = new BeginOperationDelegate(this.OnBeginSteamRegister);
            }
            if ((this.onEndSteamRegisterDelegate == null)) {
                this.onEndSteamRegisterDelegate = new EndOperationDelegate(this.OnEndSteamRegister);
            }
            if ((this.onSteamRegisterCompletedDelegate == null)) {
                this.onSteamRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSteamRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginSteamRegisterDelegate, new object[] {
                        steamUserId,
                        ticket,
                        serialKey,
                        steamUserName}, this.onEndSteamRegisterDelegate, this.onSteamRegisterCompletedDelegate, userState);
        }
    }
}
